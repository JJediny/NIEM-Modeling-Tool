/*
* generated by Xtext
*/
package org.search.niem.uml.papyrus.textedit.property.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.papyrus.uml.textedit.property.xtext.services.UmlPropertyGrammarAccess;

@Singleton
public class NIEMUmlPropertyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PropertyRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cIsDerivedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsDerivedSolidusKeyword_1_0 = (Keyword)cIsDerivedAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTypeTypeRuleParserRuleCall_4_0_0 = (RuleCall)cTypeAssignment_4_0.eContents().get(0);
		private final Keyword cUndefinedKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cMultiplicityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMultiplicityMultiplicityRuleParserRuleCall_5_0 = (RuleCall)cMultiplicityAssignment_5.eContents().get(0);
		private final Assignment cModifiersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cModifiersModifiersRuleParserRuleCall_6_0 = (RuleCall)cModifiersAssignment_6.eContents().get(0);
		private final Assignment cAggregationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAggregationAggregationRuleParserRuleCall_7_0 = (RuleCall)cAggregationAssignment_7.eContents().get(0);
		private final Assignment cDefaultAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDefaultDefaultValueRuleParserRuleCall_8_0 = (RuleCall)cDefaultAssignment_8.eContents().get(0);
		
		//PropertyRule:
		//	visibility=VisibilityKind isDerived="/"? name=ID ":" (type=TypeRule | "<Undefined>") multiplicity=MultiplicityRule?
		//	modifiers=ModifiersRule? aggregation=AggregationRule? default=DefaultValueRule?;
		public ParserRule getRule() { return rule; }

		//visibility=VisibilityKind isDerived="/"? name=ID ":" (type=TypeRule | "<Undefined>") multiplicity=MultiplicityRule?
		//modifiers=ModifiersRule? aggregation=AggregationRule? default=DefaultValueRule?
		public Group getGroup() { return cGroup; }

		//visibility=VisibilityKind
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//VisibilityKind
		public RuleCall getVisibilityVisibilityKindEnumRuleCall_0_0() { return cVisibilityVisibilityKindEnumRuleCall_0_0; }

		//isDerived="/"?
		public Assignment getIsDerivedAssignment_1() { return cIsDerivedAssignment_1; }

		//"/"
		public Keyword getIsDerivedSolidusKeyword_1_0() { return cIsDerivedSolidusKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=TypeRule | "<Undefined>"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//type=TypeRule
		public Assignment getTypeAssignment_4_0() { return cTypeAssignment_4_0; }

		//TypeRule
		public RuleCall getTypeTypeRuleParserRuleCall_4_0_0() { return cTypeTypeRuleParserRuleCall_4_0_0; }

		//"<Undefined>"
		public Keyword getUndefinedKeyword_4_1() { return cUndefinedKeyword_4_1; }

		//multiplicity=MultiplicityRule?
		public Assignment getMultiplicityAssignment_5() { return cMultiplicityAssignment_5; }

		//MultiplicityRule
		public RuleCall getMultiplicityMultiplicityRuleParserRuleCall_5_0() { return cMultiplicityMultiplicityRuleParserRuleCall_5_0; }

		//modifiers=ModifiersRule?
		public Assignment getModifiersAssignment_6() { return cModifiersAssignment_6; }

		//ModifiersRule
		public RuleCall getModifiersModifiersRuleParserRuleCall_6_0() { return cModifiersModifiersRuleParserRuleCall_6_0; }

		//aggregation=AggregationRule?
		public Assignment getAggregationAssignment_7() { return cAggregationAssignment_7; }

		//AggregationRule
		public RuleCall getAggregationAggregationRuleParserRuleCall_7_0() { return cAggregationAggregationRuleParserRuleCall_7_0; }

		//default=DefaultValueRule?
		public Assignment getDefaultAssignment_8() { return cDefaultAssignment_8; }

		//DefaultValueRule
		public RuleCall getDefaultDefaultValueRuleParserRuleCall_8_0() { return cDefaultDefaultValueRuleParserRuleCall_8_0; }
	}

	public class AggregationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAggregationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAggregationAggregationKindEnumRuleCall_1_0 = (RuleCall)cAggregationAssignment_1.eContents().get(0);
		
		//AggregationRule:
		//	"@" aggregation=AggregationKind;
		public ParserRule getRule() { return rule; }

		//"@" aggregation=AggregationKind
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//aggregation=AggregationKind
		public Assignment getAggregationAssignment_1() { return cAggregationAssignment_1; }

		//AggregationKind
		public RuleCall getAggregationAggregationKindEnumRuleCall_1_0() { return cAggregationAggregationKindEnumRuleCall_1_0; }
	}
	
	
	public class AggregationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AggregationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSharedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSharedSharedKeyword_1_0 = (Keyword)cSharedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCompositeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCompositeCompositeKeyword_2_0 = (Keyword)cCompositeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AggregationKind:
		//	none | shared | composite;
		public EnumRule getRule() { return rule; }

		//none | shared | composite
		public Alternatives getAlternatives() { return cAlternatives; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//shared
		public EnumLiteralDeclaration getSharedEnumLiteralDeclaration_1() { return cSharedEnumLiteralDeclaration_1; }

		//"shared"
		public Keyword getSharedSharedKeyword_1_0() { return cSharedSharedKeyword_1_0; }

		//composite
		public EnumLiteralDeclaration getCompositeEnumLiteralDeclaration_2() { return cCompositeEnumLiteralDeclaration_2; }

		//"composite"
		public Keyword getCompositeCompositeKeyword_2_0() { return cCompositeCompositeKeyword_2_0; }
	}
	
	private PropertyRuleElements pPropertyRule;
	private AggregationKindElements unknownRuleAggregationKind;
	private AggregationRuleElements pAggregationRule;
	
	private final Grammar grammar;

	private UmlPropertyGrammarAccess gaUmlProperty;

	@Inject
	public NIEMUmlPropertyGrammarAccess(GrammarProvider grammarProvider,
		UmlPropertyGrammarAccess gaUmlProperty) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaUmlProperty = gaUmlProperty;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.search.niem.uml.papyrus.textedit.property.xtext.NIEMUmlProperty".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public UmlPropertyGrammarAccess getUmlPropertyGrammarAccess() {
		return gaUmlProperty;
	}

	
	//PropertyRule:
	//	visibility=VisibilityKind isDerived="/"? name=ID ":" (type=TypeRule | "<Undefined>") multiplicity=MultiplicityRule?
	//	modifiers=ModifiersRule? aggregation=AggregationRule? default=DefaultValueRule?;
	public PropertyRuleElements getPropertyRuleAccess() {
		return (pPropertyRule != null) ? pPropertyRule : (pPropertyRule = new PropertyRuleElements());
	}
	
	public ParserRule getPropertyRuleRule() {
		return getPropertyRuleAccess().getRule();
	}

	//enum AggregationKind:
	//	none | shared | composite;
	public AggregationKindElements getAggregationKindAccess() {
		return (unknownRuleAggregationKind != null) ? unknownRuleAggregationKind : (unknownRuleAggregationKind = new AggregationKindElements());
	}
	
	public EnumRule getAggregationKindRule() {
		return getAggregationKindAccess().getRule();
	}

	//AggregationRule:
	//	"@" aggregation=AggregationKind;
	public AggregationRuleElements getAggregationRuleAccess() {
		return (pAggregationRule != null) ? pAggregationRule : (pAggregationRule = new AggregationRuleElements());
	}
	
	public ParserRule getAggregationRuleRule() {
		return getAggregationRuleAccess().getRule();
	}

	//enum VisibilityKind:
	//	public="+" | private="-" | protected="#" | package="~";
	public UmlPropertyGrammarAccess.VisibilityKindElements getVisibilityKindAccess() {
		return gaUmlProperty.getVisibilityKindAccess();
	}
	
	public EnumRule getVisibilityKindRule() {
		return getVisibilityKindAccess().getRule();
	}

	//TypeRule:
	//	path=QualifiedName? type=[uml::Classifier];
	public UmlPropertyGrammarAccess.TypeRuleElements getTypeRuleAccess() {
		return gaUmlProperty.getTypeRuleAccess();
	}
	
	public ParserRule getTypeRuleRule() {
		return getTypeRuleAccess().getRule();
	}

	//QualifiedName:
	//	path=[uml::Namespace] "::" remaining=QualifiedName?;
	public UmlPropertyGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaUmlProperty.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//MultiplicityRule:
	//	"[" bounds+=BoundSpecification (".." bounds+=BoundSpecification)? "]";
	public UmlPropertyGrammarAccess.MultiplicityRuleElements getMultiplicityRuleAccess() {
		return gaUmlProperty.getMultiplicityRuleAccess();
	}
	
	public ParserRule getMultiplicityRuleRule() {
		return getMultiplicityRuleAccess().getRule();
	}

	//BoundSpecification:
	//	value=UnlimitedLiteral;
	public UmlPropertyGrammarAccess.BoundSpecificationElements getBoundSpecificationAccess() {
		return gaUmlProperty.getBoundSpecificationAccess();
	}
	
	public ParserRule getBoundSpecificationRule() {
		return getBoundSpecificationAccess().getRule();
	}

	//UnlimitedLiteral returns ecore::EString:
	//	INT | "*";
	public UmlPropertyGrammarAccess.UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return gaUmlProperty.getUnlimitedLiteralAccess();
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//ModifiersRule:
	//	"{" values+=ModifierSpecification ("," values+=ModifierSpecification)* "}";
	public UmlPropertyGrammarAccess.ModifiersRuleElements getModifiersRuleAccess() {
		return gaUmlProperty.getModifiersRuleAccess();
	}
	
	public ParserRule getModifiersRuleRule() {
		return getModifiersRuleAccess().getRule();
	}

	//ModifierSpecification:
	//	value=ModifierKind | redefines=RedefinesRule | subsets=SubsetsRule;
	public UmlPropertyGrammarAccess.ModifierSpecificationElements getModifierSpecificationAccess() {
		return gaUmlProperty.getModifierSpecificationAccess();
	}
	
	public ParserRule getModifierSpecificationRule() {
		return getModifierSpecificationAccess().getRule();
	}

	//enum ModifierKind:
	//	readOnly | union | ordered | unique;
	public UmlPropertyGrammarAccess.ModifierKindElements getModifierKindAccess() {
		return gaUmlProperty.getModifierKindAccess();
	}
	
	public EnumRule getModifierKindRule() {
		return getModifierKindAccess().getRule();
	}

	//RedefinesRule:
	//	"redefines" property=[uml::Property];
	public UmlPropertyGrammarAccess.RedefinesRuleElements getRedefinesRuleAccess() {
		return gaUmlProperty.getRedefinesRuleAccess();
	}
	
	public ParserRule getRedefinesRuleRule() {
		return getRedefinesRuleAccess().getRule();
	}

	//SubsetsRule:
	//	"subsets" property=[uml::Property];
	public UmlPropertyGrammarAccess.SubsetsRuleElements getSubsetsRuleAccess() {
		return gaUmlProperty.getSubsetsRuleAccess();
	}
	
	public ParserRule getSubsetsRuleRule() {
		return getSubsetsRuleAccess().getRule();
	}

	//DefaultValueRule:
	//	"=" default=STRING;
	public UmlPropertyGrammarAccess.DefaultValueRuleElements getDefaultValueRuleAccess() {
		return gaUmlProperty.getDefaultValueRuleAccess();
	}
	
	public ParserRule getDefaultValueRuleRule() {
		return getDefaultValueRuleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaUmlProperty.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaUmlProperty.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaUmlProperty.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaUmlProperty.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaUmlProperty.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaUmlProperty.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaUmlProperty.getANY_OTHERRule();
	} 
}
